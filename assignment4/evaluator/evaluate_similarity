#!/usr/bin/env python
from __future__ import division 
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
from nltk.corpus import wordnet

import sys  

reload(sys)  
sys.setdefaultencoding('utf8')

def word_matches(h, ref):
    return sum(1 for w in h if w in ref)
 
def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        rset = set(ref)
        h1_match = simMeasure(h1, rset)
        h2_match = simMeasure(h2, rset)
        result = (1 if h1_match > h2_match else # \begin{cases}
                (0 if h1_match == h2_match
                    else -1)) # \end{cases}
        with open('result_similarity', 'a') as f:
            f.write("%s\n" % str(result))

def simMeasure(h1,rset):
    simH = 0.0
    for wordh in h1:
        for wordr in rset:
            simH += findSimilarity(wordh,wordr)
    return simH
def findSimilarity(word1,word2):
    tot_similarity = 0.0
    syn_word1 = wordnet.synsets(word1)
    syn_word2 = wordnet.synsets(word2)
    for sim1 in syn_word1:
        for sim2 in syn_word2:
            sim = sim1.wup_similarity(sim2)
            if sim is not None:
                tot_similarity += sim
    return tot_similarity
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
