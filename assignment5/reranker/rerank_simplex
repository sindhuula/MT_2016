#!/usr/bin/env python
import optparse
import sys

optparser = optparse.OptionParser()
optparser.add_option("-k", "--kbest-list", dest="input", default="data/dev+test.100best.added.feats", help="100-best translation lists")
optparser.add_option("-l", "--lm", dest="lm", default=-1.0, type="float", help="Language model weight")
optparser.add_option("-t", "--tm1", dest="tm1", default=-0.5, type="float", help="Translation model p(e|f) weight")
optparser.add_option("-s", "--tm2", dest="tm2", default=-0.5, type="float", help="Lexical translation model p_lex(f|e) weight")
optparser.add_option("-w", "--wc", dest="wc", default=-1, type="float", help="Word Count")
optparser.add_option("-u", "--ut", dest="ut", default=0, type="float", help="Untranslated Words")
optparser.add_option("-m", "--mt", dest="mt", default=0, type="float", help="Meteor Rate")
(opts, _) = optparser.parse_args()
weights = {'p(e)'       : float(opts.lm) ,
           'p(e|f)'     : float(opts.tm1),
           'p_lex(f|e)' : float(opts.tm2),
           'wc' : float(opts.wc),
           'ut' : float(opts.ut),
           'mt' : float(opts.mt)
           }

all_hyps = [pair.split(' ||| ') for pair in open(opts.input)]
num_sents = len(all_hyps) / 100

points = [first_point, second_point, third_point]
for i in range(5):
  # keep list of stats
  b_scores = []
  for (n, p) in enumerate(points)
    total = []
    for s in xrange(0, num_sents):
      hyps_for_one_sent = all_hyps[s * 100:s * 100 + 100]
      (best_score, best) = (-1e300, '')
      for (num, hyp, feats) in hyps_for_one_sent:
        score = 0.0
        for feat in feats.split(' '):
          (k, v) = feat.split('=')
          score += p[k]*float(v)
        if score > best_score:
          (best_score, best) = (score, hyp)
      total.append(best)
    b_scores.append(p, compute_bleu(total), total)


  best_point = sorted(bleu_scores, key = lambda x: -x[1])[0]
  good_point = sorted(bleu_scores, key = lambda x: -x[1])[1]
  worst_point = sorted(bleu_scores, key = lambda x: -x[1])[2]

  point_M = compute_midpoint(best_point[0], good_point[0], float(opts.wc))
  point_S = compute_midpoint(best_point[0], worst_point[0], float(opts.wc))
  points = [best_point[0], point_M, point_S]

  this_bleu = best_point[1]
  if this_bleu > best_bleu:
    best_bleu = this_bleu

#sys.stderr.write(str(best_point[0])+ "\n")
for i in best_point[2]:
  try: 
    sys.stdout.write("%s\n" % i)
  except (Exception):
    sys.exit(1)
