#!/usr/bin/env python
import optparse
import bleu
import sys
import random

def compute_bleu(hypothesis_list):
  ref = [line.strip().split() for line in open("data/dev.ref")]
  hyp = [hypothesis.strip().split() for hypothesis in hypothesis_list]

  stats = [0 for i in xrange(10)]
  for (r,h) in zip(ref, hyp):
    stats = [sum(scores) for scores in zip(stats, bleu.bleu_stats(h,r))]
  return bleu.bleu(stats)

optparser = optparse.OptionParser()
optparser.add_option("-k", "--kbest-list", dest="input", default="data/dev+test.100best", help="100-best translation lists")
optparser.add_option("-l", "--lm", dest="lm", default=-1.0, type="float", help="Language model weight")
optparser.add_option("-t", "--tm1", dest="tm1", default=-1.0, type="float", help="Translation model p(e|f) weight")
optparser.add_option("-s", "--tm2", dest="tm2", default=-1.0, type="float", help="Lexical translation model p_lex(f|e) weight")
optparser.add_option("-w", "--wc", dest="wc", default=1.1, type="float", help="Word count weight")
(opts, _) = optparser.parse_args()
weights = {'p(e)'       : float(opts.lm) ,
           'p(e|f)'     : float(opts.tm1),
           'p_lex(f|e)' : float(opts.tm2),
           'word_count' : float(opts.wc)}

best_weights = {'p(e)'       : float(opts.lm) ,
                'p(e|f)'     : float(opts.tm1),
                'p_lex(f|e)' : float(opts.tm2),
                'word_count' : float(opts.wc)}

all_hyps = [pair.split(' ||| ') for pair in open(opts.input)]
num_sents = len(all_hyps) / 100
best_bleu = 0.0
actual_total = []

for i in range(2):
  total = []
  if i < 10:
    weights['p(e)'] += .1 
  if i >= 10 and i < 20:
    weights['p(e|f)'] += .1
    weights['p(e)'] = best_weights['p(e)']
    #weights['p(e|f)'] += (i%10)/10.0
  if i >= 20 and i < 30:
    weights['p_lex(f|e)'] += .1
    weights['p(e|f)'] = best_weights['p(e|f)']
  if i >= 30:
    weights['p_lex(f|e)'] = best_weights['p(e|f)']
    weights['word_count'] += 0.1 
  
  if i%10==0:
    sys.stderr.write("On iteration: " + str(i) + "\n")
  
  for s in xrange(0, num_sents):
    hyps_for_one_sent = all_hyps[s * 100:s * 100 + 100]
    (best_score, best) = (-1e300, '')
    for (num, hyp, feats) in hyps_for_one_sent:
      score = 0.0
      for feat in feats.split(' '):
        (k, v) = feat.split('=')
        score += weights[k]*float(v)
      score += len(hyp.strip().split(' '))*weights['word_count']
      
      # Check if there's russian characters. If so, reduce the score
      # because there's untranslated words
      for w in hyp.strip().split(' '):
        for character in w:
          if ord(character) >= 128 and ord(character) <= 252: 
            score += -2.0
      
      if score > best_score:
        (best_score, best) = (score, hyp)
    total.append(best)

  this_bleu = compute_bleu(total)
  if this_bleu > best_bleu:
    best_bleu = this_bleu
    for k in weights:
      best_weights[k] = weights[k]
    actual_total = []
    for element in total:
      actual_total.append(element)

sys.stderr.write(str(best_weights)+"\n")
for i in actual_total:
  try: 
    sys.stdout.write("%s\n" % i)
  except (Exception):
    sys.exit(1)
