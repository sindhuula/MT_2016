#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
#Input Parameters
optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
#Size of training data
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)
sys.stderr.write("Training with IBM Model 1...")
#Splits the files so that you get f[i] count, e[j] count and count(f,e)
#IBM stuff
#Find Prec, Rec and AER.
# Learn/Train: Expected Maximization for IBM Model 1
fprobs = {} #prob(f|e)
thetak_prob = {} #Theta prob
countfe = {} #Counter
counte = {} #coutner
fnum = 0 #counter for french words
enum = 0 # counter for english words
fnumbers = {} #assigning numeric value to a french word
enumbers = {} #assigning numeric value to an english word
for fsentence, esentence in zip(open(f_data),open(e_data)):
  for fword in fsentence.rstrip(' .\n').split(' '):
    if fword not in fprobs:
      fprobs[fword] = {}
      fnum += 1
      fnumbers[fword] = fnum
    total_sum = 0
    eprobs = {}
    for eword in esentence.rstrip(' .\n').split(' '):
      if eword not in enumbers:
        enum += 1
        enumbers[eword] = enum 
      if eword not in eprobs:
        eprobs[eword] = 0 #float(1)/float((len(esentence.rstrip(' .\n').split(' '))))
      eprobs[eword] += float(1)/float((len(esentence.rstrip(' .\n').split(' '))))
      if eword not in (fprobs[fword]):
        fprobs[fword] = eprobs
      else:
        fprobs[fword][eword] += eprobs[eword]
      total_sum += fprobs[fword][eword]
    for eword in esentence.rstrip(' .\n').split(' '):
      c = fprobs[fword][eword]/total_sum
      if (fword,eword) in countfe:
        countfe[(fword,eword)] += c
      else:
        countfe[(fword,eword)] = c
      if eword in counte:
        counte[eword] += c
      else:
        counte[eword] = c  
  for (fword, eword) in countfe:
    thetak_prob[(fword, eword)] = countfe[(fword, eword)]/counte[eword]

# Predict/Align: Most Probable Alignment:
for fsentence, esentence in zip(open(f_data),open(e_data))[:opts.num_sents]:
  for fword in fsentence.rstrip(' .\n').split(' '):
      best_j =''
      best_prob = 0
      for eword in esentence.rstrip(' .\n').split(' '):
        if thetak_prob[(fword, eword)] > best_prob:
          best_prob = thetak_prob[(fword, eword)]
          best_j = enumbers[eword]
      sys.stdout.write("%i-%i " % (fnumbers[fword],best_j))
  sys.stdout.write("\n")
