#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
#Input Parameters
optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
#Size of training data
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)
sys.stderr.write("Training with IBM Model 1...")
#Splits the files so that you get f[i] count, e[j] count and count(f,e)
'''
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]
f_count = defaultdict(int)
e_count = defaultdict(int)
fe_count = defaultdict(int)
for (n, (f, e)) in enumerate(bitext):
  for f_i in set(f):
    f_count[f_i] += 1
    for e_j in set(e):
      fe_count[(f_i,e_j)] += 1
  for e_j in set(e):
    e_count[e_j] += 1
  if n % 500 == 0:
    sys.stderr.write(".")
print "f",f_data
print "e",e_data
'''
#IBM stuff
#Find Prec, Rec and AER.

# Learn/Train: Expected Maximization for IBM Model 1
k = 0
fprobs = {} #prob(f|e)
i = 0
for fsentence, esentence in zip(open(f_data),open(e_data))[:opts.num_sents]:
  for fword in fsentence.split(' '):
    fw_set = fprobs[fword]
    eprobs = {}
    for eword in esentence.split(' '):
      if eword not in eprobs:
        eprobs[eword] = float(1)/float((len(esentence.split(' '))))
      else:
        eprobs[eword] += float(1)/float((len(esentence.split(' '))))
      if eword not in (fprobs[fword].values()):
        fw_set = eprobs
        print "first",eword
      else:
        fwset[eword] += eprobs[eword]
        print "not"
  i = i+1
print i
# Predict/Align: Most Probable Alignment:

'''
# dice stuff
dice = defaultdict(int)
for (k, (f_i, e_j)) in enumerate(fe_count.keys()):
  dice[(f_i,e_j)] = 2.0 * fe_count[(f_i, e_j)] / (f_count[f_i] + e_count[e_j])
  if k % 5000 == 0:
    sys.stderr.write(".")
sys.stderr.write("\n")

for (f, e) in bitext:
  for (i, f_i) in enumerate(f): 
    for (j, e_j) in enumerate(e):
      if dice[(f_i,e_j)] >= opts.threshold:
        sys.stdout.write("%i-%i " % (i,j))
  sys.stdout.write("\n")
'''
